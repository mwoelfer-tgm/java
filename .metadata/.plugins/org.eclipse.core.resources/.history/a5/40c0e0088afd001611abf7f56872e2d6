package bruch

class Bruch {
	BigInteger z
	BigInteger n
	
	Bruch(Bruch b){
		
		this.z = b.z
		this.n = b.n
	}
	
	Bruch(int z){
		this.z = z
		this.n = 1
	}
	
	Bruch(int z, int n){
		this.z = z
		if (n == 0){
			throw new IllegalArgumentException("Nenner als 0 nicht erlaubt!")
		}
		this.n = n
	}
	
	String toString(){
		"Bruch($z, $n)"
	}
	
	Double doubleValue(){
		this.z / this.n
	}
	Bruch div(Bruch other){
		z = this.z * other.n
		n = this.n * other.z
		
		new Bruch(z/ gcd(z,n) as BigInteger, n/ gcd(z,n) as BigInteger)
	}
	
	Bruch multiply(Bruch other){
		z = this.z * other.z
		n = this.n * other.n
		
		new Bruch(z/ gcd(z,n) as BigInteger, n/ gcd(z,n) as BigInteger)
	}
	
	Bruch plus(Bruch other){
		if(other instanceof Bruch){
			def neuN = lcm(this.n,other.n) as BigInteger
			
			this.z *= neuN / this.n as BigInteger
			other.z *= neuN / other.n as BigInteger
			
			new Bruch(this.z - other.z, neuN)
		} else {
			new Bruch (this.z - (this.n*other), this.n)
		}
	}
	
	Bruch minus(Bruch other){
		if(other instanceof Bruch){
			def neuN = lcm(this.n,other.n) as BigInteger
			
			this.z *= neuN / this.n as BigInteger
			other.z *= neuN / other.n as BigInteger
			
			new Bruch(this.z - other.z, neuN)
		} else {
			new Bruch (this.z + (this.n*other), this.n)
		}
	}
	
	int compareTo(Bruch other){
		return (this.z <=> other.z) && (this.n <=> other.n)
	}
	
	// Source: http://langref.org/scala+groovy/algorithms/arithmetic/greatest-common-divisor
	def static gcd(int i, int j) {
		if (Math.min(i,j)==0) return Math.max(i,j)
		else return gcd(Math.min(i,j),Math.abs(i-j))
	}
	
	// Source: http://stackoverflow.com/questions/4201860/how-to-find-gcd-lcm-on-a-set-of-numbers
	def static lcm(int a, int b)
	{
		return a * (b / gcd(a, b));
	}
	
}


