package bruch

import java.lang.invoke.LambdaForm.Name

class Bruch implements Comparable{
	BigInteger z
	BigInteger n
	
	Bruch(Bruch b){
		this(b.z, b.n)
	}
	
	Bruch(int z){
		this(z, 1)
	}
	
	Bruch(long z, long n){
		this(z as BigInteger, n as BigInteger)
	}
	
	Bruch(int z, int n){
		this.z = z
		if (n == 0){
			throw new IllegalArgumentException("Nenner als 0 nicht erlaubt!")
		}
		this.n = n
	}
	
	
	public Object asType(Class other){
		other == String ? toString() : doubleValue().asType(other)
	}
	
	String toString(){
		"Bruch($z, $n)"
	}
	
	Double doubleValue(){
		this.z / this.n
	}
	Bruch div(other, optional=null){
		if(other instanceof Bruch){
			z = this.z * other.n
			n = this.n * other.z
		} else if (optional == null){
			z = this.z
			n = this.n * other
		} else {
			z = this.z * optional
			n = this.n * other
		}
		
		new Bruch(z/ gcd(z,n) as BigInteger, n/ gcd(z,n) as BigInteger)
	}
	
	Bruch multiply(other, optional=null){
		if(other instanceof Bruch){
			z = this.z * other.z
			n = this.n * other.n
		} else if (optional==null){
			z = this.z * other
			n = this.n
		} else {
			z = this.z * other
			n = this.n * optional
		}
		
		new Bruch(z/ gcd(z,n) as BigInteger, n/ gcd(z,n) as BigInteger)
	}
	
	Bruch plus(other, optional=null){
		if(other instanceof Bruch){
			def neuN = lcm(this.n,other.n) as BigInteger
			
			this.z *= neuN / this.n as BigInteger
			other.z *= neuN / other.n as BigInteger
			
			new Bruch(this.z + other.z, neuN)
		} else if(optional==null){
			new Bruch (this.z + (this.n*other), this.n)
		} else {
			def neuN = lcm(this.n, optional) as BigInteger
			
			this.z *= neuN / this.n as BigInteger
			other *= neuN / optional as BigInteger
			
			return new Bruch(this.z + other, neuN)
		}
	}
	
	Bruch minus(other, optional=null){
		if(other instanceof Bruch){
			def neuN = lcm(this.n,other.n) as BigInteger
			
			this.z *= neuN / this.n as BigInteger
			other.z *= neuN / other.n as BigInteger
			
			return new Bruch(this.z - other.z, neuN)
		} else if(optional == null) {
			return new Bruch (this.z - (this.n*other), this.n)
		} else {
			def neuN = lcm(this.n, optional) as BigInteger
			
			this.z *= neuN / this.n as BigInteger
			other *= neuN / optional as BigInteger
			
			return new Bruch(this.z - other, neuN)
		}
	}
	
	def correct(){
		if(this.n < 0){
			this.z = -this.z
			this.n = -this.n
		}
	}
	
	Bruch negative(){
		new Bruch(-this.z, this.n)
	}
	
	def shorten(){
		def gcd = gcd(this.z,this.n)
		this.z /= gcd
		this.n /= gcd
	}
	
	// Source: http://langref.org/scala+groovy/algorithms/arithmetic/greatest-common-divisor
	def static gcd(int i, int j) {
		if (Math.min(i,j)==0) return Math.max(i,j)
		else return gcd(Math.min(i,j),Math.abs(i-j))
	}
	
	// Source: http://stackoverflow.com/questions/4201860/how-to-find-gcd-lcm-on-a-set-of-numbers
	def static lcm(int a, int b)
	{
		return a * (b / gcd(a, b));
	}

	@Override
	public int compareTo(Object other) {
		this.doubleValue() <=> other.doubleValue()
	}
	
	@Override
	public boolean equals(Object other){
		this.doubleValue() == other.doubleValue()
	}
}


