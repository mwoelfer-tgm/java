<?xml version="1.0" encoding="UTF-8"?><testrun name="BruchTest" project="A12" tests="43" started="43" failures="2" errors="0" ignored="0">
  <testsuite name="test.BruchTest" time="0.267">
    <testcase name="testDivideBruch" classname="test.BruchTest" time="0.113"/>
    <testcase name="testDivideBruch2" classname="test.BruchTest" time="0.001"/>
    <testcase name="testGcd" classname="test.BruchTest" time="0.006"/>
    <testcase name="testcompareToGreather" classname="test.BruchTest" time="0.001"/>
    <testcase name="testGetN" classname="test.BruchTest" time="0.001"/>
    <testcase name="testGetZ" classname="test.BruchTest" time="0.0"/>
    <testcase name="testSetN" classname="test.BruchTest" time="0.002"/>
    <testcase name="testSetZ" classname="test.BruchTest" time="0.0"/>
    <testcase name="testToString" classname="test.BruchTest" time="0.015"/>
    <testcase name="testasDouble" classname="test.BruchTest" time="0.018"/>
    <testcase name="testNegative2" classname="test.BruchTest" time="0.0"/>
    <testcase name="testPlusBruch" classname="test.BruchTest" time="0.018">
      <failure>java.lang.AssertionError: expected:&lt;Bruch(21, 4)&gt; but was:&lt;Bruch(9, 4)&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:118)&#13;
	at org.junit.Assert.assertEquals(Assert.java:144)&#13;
	at org.junit.Assert$assertEquals.callStatic(Unknown Source)&#13;
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallStatic(CallSiteArray.java:56)&#13;
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callStatic(AbstractCallSite.java:194)&#13;
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callStatic(AbstractCallSite.java:214)&#13;
	at test.BruchTest.testPlusBruch(BruchTest.groovy:183)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)&#13;
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)&#13;
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)&#13;
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)&#13;
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)&#13;
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)&#13;
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)&#13;
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)&#13;
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)&#13;
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)&#13;
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)&#13;
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)&#13;
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="testcompareToLower" classname="test.BruchTest" time="0.002"/>
    <testcase name="testBruchBigInteger" classname="test.BruchTest" time="0.002"/>
    <testcase name="testDivideBigInteger" classname="test.BruchTest" time="0.002"/>
    <testcase name="testMinusBruch2" classname="test.BruchTest" time="0.005"/>
    <testcase name="testasString" classname="test.BruchTest" time="0.001"/>
    <testcase name="testMultiplyBruch2" classname="test.BruchTest" time="0.004"/>
    <testcase name="testPlusBruch2" classname="test.BruchTest" time="0.004">
      <failure>java.lang.AssertionError: expected:&lt;Bruch(15, 4)&gt; but was:&lt;Bruch(9, 4)&gt;&#13;
	at org.junit.Assert.fail(Assert.java:88)&#13;
	at org.junit.Assert.failNotEquals(Assert.java:834)&#13;
	at org.junit.Assert.assertEquals(Assert.java:118)&#13;
	at org.junit.Assert.assertEquals(Assert.java:144)&#13;
	at org.junit.Assert$assertEquals.callStatic(Unknown Source)&#13;
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallStatic(CallSiteArray.java:56)&#13;
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callStatic(AbstractCallSite.java:194)&#13;
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callStatic(AbstractCallSite.java:214)&#13;
	at test.BruchTest.testPlusBruch2(BruchTest.groovy:193)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)&#13;
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)&#13;
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)&#13;
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)&#13;
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)&#13;
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)&#13;
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)&#13;
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)&#13;
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)&#13;
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)&#13;
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)&#13;
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)&#13;
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="testPlusBigInteger" classname="test.BruchTest" time="0.002"/>
    <testcase name="testcompareToEquals" classname="test.BruchTest" time="0.0"/>
    <testcase name="testBruchBruch" classname="test.BruchTest" time="0.01"/>
    <testcase name="testdoubleValue" classname="test.BruchTest" time="0.001"/>
    <testcase name="testMultiplyBigInteger" classname="test.BruchTest" time="0.004"/>
    <testcase name="testMinusBigIntegerBigInteger" classname="test.BruchTest" time="0.007"/>
    <testcase name="testCorrect" classname="test.BruchTest" time="0.004"/>
    <testcase name="testDivideBigInteger2" classname="test.BruchTest" time="0.021"/>
    <testcase name="testDivideBigInteger3" classname="test.BruchTest" time="0.003"/>
    <testcase name="testMinusBigInteger" classname="test.BruchTest" time="0.001"/>
    <testcase name="testDivideBigIntegerBigInteger" classname="test.BruchTest" time="0.002"/>
    <testcase name="testMinusBruch" classname="test.BruchTest" time="0.0"/>
    <testcase name="testPlusBigIntegerBigInteger" classname="test.BruchTest" time="0.004"/>
    <testcase name="testBruchBigIntegerBigInteger" classname="test.BruchTest" time="0.0"/>
    <testcase name="testasBigDecimal" classname="test.BruchTest" time="0.001"/>
    <testcase name="testasInteger" classname="test.BruchTest" time="0.002"/>
    <testcase name="testNegative" classname="test.BruchTest" time="0.0"/>
    <testcase name="testShorten" classname="test.BruchTest" time="0.003"/>
    <testcase name="testMultiplyBruch" classname="test.BruchTest" time="0.001"/>
    <testcase name="testasBigInteger" classname="test.BruchTest" time="0.001"/>
    <testcase name="testMultiplyBigIntegerBigInteger" classname="test.BruchTest" time="0.002"/>
    <testcase name="testDoubleValue" classname="test.BruchTest" time="0.0"/>
    <testcase name="testDivideBruchIllegalArgumentException" classname="test.BruchTest" time="0.001"/>
    <testcase name="testasLong" classname="test.BruchTest" time="0.002"/>
  </testsuite>
</testrun>
